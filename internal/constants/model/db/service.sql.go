// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: service.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createService = `-- name: CreateService :one
INSERT INTO services (
    name,
    password
) VALUES (
    $1, $2
) RETURNING id, status, name, password, deleted_at, created_at, updated_at
`

type CreateServiceParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, createService, arg.Name, arg.Password)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Name,
		&i.Password,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services WHERE id = $1
`

func (q *Queries) DeleteService(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteService, id)
	return err
}

const getServiceByName = `-- name: GetServiceByName :one
SELECT id, status, name, password, deleted_at, created_at, updated_at FROM services WHERE name = $1
`

func (q *Queries) GetServiceByName(ctx context.Context, name string) (Service, error) {
	row := q.db.QueryRow(ctx, getServiceByName, name)
	var i Service
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Name,
		&i.Password,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
