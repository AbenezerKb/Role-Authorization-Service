// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getUserWithUserIdAndServiceId = `-- name: GetUserWithUserIdAndServiceId :one
SELECT id, user_id, status, deleted_at, created_at, updated_at, service_id FROM users WHERE 
user_id = $1 AND service_id = $2 AND deleted_at IS NULL
`

type GetUserWithUserIdAndServiceIdParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) GetUserWithUserIdAndServiceId(ctx context.Context, arg GetUserWithUserIdAndServiceIdParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithUserIdAndServiceId, arg.UserID, arg.ServiceID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ServiceID,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (
user_id,
service_id
) VALUES (
 $1,$2
)
`

type RegisterUserParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.Exec(ctx, registerUser, arg.UserID, arg.ServiceID)
	return err
}
