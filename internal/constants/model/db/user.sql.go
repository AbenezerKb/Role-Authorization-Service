// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const getUserPermissionWithInTenant = `-- name: GetUserPermissionWithInTenant :many
with _user as(
    select id from users u where u.user_id=$1 and u.deleted_at is null
),_tenant as(
    select id from tenants t where t.tenant_name=$2 and t.service_id=$3
)
select p.name,p.status,p.created_at,p.statement,p.id,p.description,coalesce(json_agg(json_build_object('name',p2.name,'status',p2.status,'description',p2.description,'statement',p2.statement,'created_at',p2.created_at,'id',p2.id))filter ( where p2.deleted_at is null and p2.status='ACTIVE' ),'[]') AS inherited_permissions  from   _user,_tenant,tenant_users_roles tur left join roles r on tur.role_id = r.id left join role_permissions rp on r.id = rp.role_id left join permissions p on p.id = rp.permission_id left join permissions_hierarchy ph on p.id = ph.parent left join permissions p2 on p2.id = ph.child where tur.deleted_at is null and tur.status='ACTIVE' and p.status='ACTIVE'  and
tur.tenant_id=_tenant.id and tur.status='ACTIVE' and r.status='ACTIVE' and tur.user_id=_user.id group by  p.name,p.status,p.created_at,p.statement,p.id
`

type GetUserPermissionWithInTenantParams struct {
	UserID     uuid.UUID `json:"user_id"`
	TenantName string    `json:"tenant_name"`
	ServiceID  uuid.UUID `json:"service_id"`
}

type GetUserPermissionWithInTenantRow struct {
	Name                 sql.NullString `json:"name"`
	Status               NullStatus     `json:"status"`
	CreatedAt            sql.NullTime   `json:"created_at"`
	Statement            pgtype.JSON    `json:"statement"`
	ID                   uuid.NullUUID  `json:"id"`
	Description          sql.NullString `json:"description"`
	InheritedPermissions interface{}    `json:"inherited_permissions"`
}

func (q *Queries) GetUserPermissionWithInTenant(ctx context.Context, arg GetUserPermissionWithInTenantParams) ([]GetUserPermissionWithInTenantRow, error) {
	rows, err := q.db.Query(ctx, getUserPermissionWithInTenant, arg.UserID, arg.TenantName, arg.ServiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPermissionWithInTenantRow
	for rows.Next() {
		var i GetUserPermissionWithInTenantRow
		if err := rows.Scan(
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.Statement,
			&i.ID,
			&i.Description,
			&i.InheritedPermissions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPermissionWithInTheDomain = `-- name: GetUserPermissionWithInTheDomain :many
with _user as(
    select id from users u where u.user_id=$1 and u.service_id=$2 and u.deleted_at is null
), _permissions as(
select p.name,p.status,p.created_at,p.statement,p.id,p.description,t.tenant_name ,coalesce(json_agg(json_build_object('name',p2.name,'status',p2.status,'description',p2.description,'statement',p2.statement,'created_at',p2.created_at,'id',p2.id))filter ( where p2.deleted_at is null and p2.status='ACTIVE' ),'[]') AS inherited_permissions  from   _user,tenants t,tenant_users_roles tur left join roles r on tur.role_id = r.id left join role_permissions rp on r.id = rp.role_id left join permissions p on p.id = rp.permission_id left join permissions_hierarchy ph on p.id = ph.parent left join permissions p2 on p2.id = ph.child where p.status='ACTIVE' and p.deleted_at is null  and tur.deleted_at is null and tur.statusand tur.tenant_id=t.id  and tur.user_id=_user.id  and t.domain_id=$3 and t.deleted_at is null and t.service_id=$2 and r.status='ACTIVE' group by  p.name,p.status,p.created_at,p.statement,p.id,p.description,p.deleted_at,t.tenant_name
)
select tenant_name as tenant,coalesce(json_agg(_permissions)filter ( where _permissions.status='ACTIVE' ),'[]')  as permissions from _permissions group by tenant_name
`

type GetUserPermissionWithInTheDomainParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ServiceID uuid.UUID `json:"service_id"`
	DomainID  uuid.UUID `json:"domain_id"`
}

type GetUserPermissionWithInTheDomainRow struct {
	Tenant      string      `json:"tenant"`
	Permissions interface{} `json:"permissions"`
}

func (q *Queries) GetUserPermissionWithInTheDomain(ctx context.Context, arg GetUserPermissionWithInTheDomainParams) ([]GetUserPermissionWithInTheDomainRow, error) {
	rows, err := q.db.Query(ctx, getUserPermissionWithInTheDomain, arg.UserID, arg.ServiceID, arg.DomainID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPermissionWithInTheDomainRow
	for rows.Next() {
		var i GetUserPermissionWithInTheDomainRow
		if err := rows.Scan(&i.Tenant, &i.Permissions); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserWithUserIdAndServiceId = `-- name: GetUserWithUserIdAndServiceId :one
SELECT id, user_id, status, deleted_at, created_at, updated_at, service_id FROM users WHERE 
user_id = $1 AND service_id = $2 AND deleted_at IS NULL
`

type GetUserWithUserIdAndServiceIdParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) GetUserWithUserIdAndServiceId(ctx context.Context, arg GetUserWithUserIdAndServiceIdParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserWithUserIdAndServiceId, arg.UserID, arg.ServiceID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Status,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ServiceID,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :exec
INSERT INTO users (
user_id,
service_id
) VALUES (
 $1,$2
)
`

type RegisterUserParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) error {
	_, err := q.db.Exec(ctx, registerUser, arg.UserID, arg.ServiceID)
	return err
}

const updateUserRoleStatus = `-- name: UpdateUserRoleStatus :one
with _tenants as(
    select id from tenants t where t.tenant_name=$1 and t.service_id=$2 and t.deleted_at IS NULL
),_user as(
    select id from users u where u.user_id=$3 and u.deleted_at is null and u.service_id=$2
)
update tenant_users_roles tur set status =$4 from _tenants,_user where tur.role_id=$5 and tur.deleted_at IS NULL and tur.tenant_id=_tenants.id and tur.user_id=_user.id returning tur.id
`

type UpdateUserRoleStatusParams struct {
	TenantName string    `json:"tenant_name"`
	ServiceID  uuid.UUID `json:"service_id"`
	UserID     uuid.UUID `json:"user_id"`
	Status     Status    `json:"status"`
	RoleID     uuid.UUID `json:"role_id"`
}

func (q *Queries) UpdateUserRoleStatus(ctx context.Context, arg UpdateUserRoleStatusParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserRoleStatus,
		arg.TenantName,
		arg.ServiceID,
		arg.UserID,
		arg.Status,
		arg.RoleID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const updateUserStatus = `-- name: UpdateUserStatus :one
UPDATE users SET status = $1 WHERE user_id = $2 AND service_id=$3 AND deleted_at IS NULL RETURNING id
`

type UpdateUserStatusParams struct {
	Status    Status    `json:"status"`
	UserID    uuid.UUID `json:"user_id"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateUserStatus, arg.Status, arg.UserID, arg.ServiceID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
