// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: tenent.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTenent = `-- name: CreateTenent :exec
INSERT INTO tenants (
status,
tenant_name,
service_id

) VALUES (
 $1,$2,$3
)
`

type CreateTenentParams struct {
	Status     bool      `json:"status"`
	TenantName string    `json:"tenant_name"`
	ServiceID  uuid.UUID `json:"service_id"`
}

func (q *Queries) CreateTenent(ctx context.Context, arg CreateTenentParams) error {
	_, err := q.db.Exec(ctx, createTenent, arg.Status, arg.TenantName, arg.ServiceID)
	return err
}

const getTenentWithNameAndServiceId = `-- name: GetTenentWithNameAndServiceId :one
SELECT id, status, tenant_name, service_id, deleted_at, created_at, updated_at FROM tenants WHERE 
tenant_name = $1 AND service_id = $2
`

type GetTenentWithNameAndServiceIdParams struct {
	TenantName string    `json:"tenant_name"`
	ServiceID  uuid.UUID `json:"service_id"`
}

func (q *Queries) GetTenentWithNameAndServiceId(ctx context.Context, arg GetTenentWithNameAndServiceIdParams) (Tenant, error) {
	row := q.db.QueryRow(ctx, getTenentWithNameAndServiceId, arg.TenantName, arg.ServiceID)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.TenantName,
		&i.ServiceID,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
