// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: permission.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgtype"
)

const assignDomain = `-- name: AssignDomain :exec
with _domain as(
    select domains.id as domain_id from domains where domains.id=$1
) INSERT INTO permission_domains(domain_id,permission_id)
SELECT  domain_id, $2 from _domain
WHERE NOT exists(select permission_id from permission_domains where permission_id=$2 and domain_id=_domain.domain_id)
`

type AssignDomainParams struct {
	ID           uuid.UUID `json:"id"`
	PermissionID uuid.UUID `json:"permission_id"`
}

func (q *Queries) AssignDomain(ctx context.Context, arg AssignDomainParams) error {
	_, err := q.db.Exec(ctx, assignDomain, arg.ID, arg.PermissionID)
	return err
}

const createOrGetPermission = `-- name: CreateOrGetPermission :one
WITH new_row AS (
    INSERT INTO permissions (name,description,statment,service_id)
        SELECT $1,$2,$3,$4
        WHERE NOT EXISTS (SELECT id FROM permissions WHERE name = $1 and service_id=$4)
        RETURNING id
)
SELECT id FROM new_row
UNION
SELECT id FROM permissions WHERE name = $1 and service_id=$4
`

type CreateOrGetPermissionParams struct {
	Name        string      `json:"name"`
	Description string      `json:"description"`
	Statment    pgtype.JSON `json:"statment"`
	ServiceID   uuid.UUID   `json:"service_id"`
}

func (q *Queries) CreateOrGetPermission(ctx context.Context, arg CreateOrGetPermissionParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOrGetPermission,
		arg.Name,
		arg.Description,
		arg.Statment,
		arg.ServiceID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
