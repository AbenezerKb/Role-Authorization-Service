// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: domain.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createDomain = `-- name: CreateDomain :one
INSERT INTO domains (
    name ,
    service_id
)VALUES (
    $1,$2
) RETURNING id, name, deleted_at, service_id, created_at, updated_at
`

type CreateDomainParams struct {
	Name      string    `json:"name"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.db.QueryRow(ctx, createDomain, arg.Name, arg.ServiceID)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.ServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDomain = `-- name: DeleteDomain :exec
DELETE from domains 
WHERE id = $1
`

func (q *Queries) DeleteDomain(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDomain, id)
	return err
}

const getDomainByServiceId = `-- name: GetDomainByServiceId :many
SELECT id, name, deleted_at, service_id, created_at, updated_at FROM domains 
WHERE service_id = $1
`

func (q *Queries) GetDomainByServiceId(ctx context.Context, serviceID uuid.UUID) ([]Domain, error) {
	rows, err := q.db.Query(ctx, getDomainByServiceId, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DeletedAt,
			&i.ServiceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isDomainExist = `-- name: IsDomainExist :one
SELECT id, name, deleted_at, service_id, created_at, updated_at FROM domains 
WHERE service_id = $1 AND name = $2
`

type IsDomainExistParams struct {
	ServiceID uuid.UUID `json:"service_id"`
	Name      string    `json:"name"`
}

func (q *Queries) IsDomainExist(ctx context.Context, arg IsDomainExistParams) (Domain, error) {
	row := q.db.QueryRow(ctx, isDomainExist, arg.ServiceID, arg.Name)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.ServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const softDeleteDomain = `-- name: SoftDeleteDomain :one
UPDATE domains set deleted_at = now() 
WHERE name = $1 AND service_id = $2
RETURNING id, name, deleted_at, service_id, created_at, updated_at
`

type SoftDeleteDomainParams struct {
	Name      string    `json:"name"`
	ServiceID uuid.UUID `json:"service_id"`
}

func (q *Queries) SoftDeleteDomain(ctx context.Context, arg SoftDeleteDomainParams) (Domain, error) {
	row := q.db.QueryRow(ctx, softDeleteDomain, arg.Name, arg.ServiceID)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DeletedAt,
		&i.ServiceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
