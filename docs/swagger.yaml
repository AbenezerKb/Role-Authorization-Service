basePath: /v1
definitions:
  dto.CreateDomain:
    properties:
      name:
        description: Name is the name of the domain
        type: string
      service_id:
        description: ServiceID is the id of the service which own the domain.
        type: string
    type: object
  dto.CreatePermission:
    properties:
      description:
        description: Description is the description of the permission being created
        type: string
      domains:
        description: Domain is an array that holds the id of the domains the permission
          is accessible at
        items:
          type: string
        type: array
      name:
        description: Name is the name of the permission being created
        type: string
      service_id:
        description: ServiceID is the id of the service the permission belongs to
        type: string
      statement:
        $ref: '#/definitions/dto.Statement'
        description: Statement is an object that holds the action, resource and effect
          of the permission being created
    type: object
  dto.CreatePermissionDependency:
    properties:
      inherited_permissions:
        description: InheritedPermissions is the list of permissions' name the permission
          is inheriting.
        items:
          type: string
        type: array
      permission:
        description: PermissionName is the name of the permission.
        type: string
    type: object
  dto.CreateRole:
    properties:
      name:
        description: Name is the name of the role.
        type: string
      permissions_id:
        description: PermissionID is the list of permissions id's.
        items:
          type: string
        type: array
      service_id:
        description: ServiceID is the id of the service the tenant belongs to.
        type: string
      tenant_name:
        description: TenantName is the name of the tenant the role is in.
        type: string
    type: object
  dto.CreateService:
    properties:
      name:
        description: Name is the name of the service.
        type: string
      password:
        description: |-
          Password is the secret the service uses to authenticate itself.
          It is automatically generated when the service is created.
        type: string
      user_id:
        description: UserId is the id of the user assigned as the super admin for
          the created service.
        type: string
    type: object
  dto.CreateServiceResponse:
    properties:
      password:
        description: |-
          Password is the secret the service uses to authenticate itself.
          It is automatically generated when the service is created.
        type: string
      service:
        description: Service is the name of the service.
        type: string
      service_id:
        description: ServiceID is the unique identifier for the created service.
        type: string
      service_status:
        description: |-
          ServiceStatus is the status of the service.
          It is set to false when the service is created.
        type: string
      tenant:
        description: |-
          Tenant is the domain the super admin is in.
          It is automatically created upon the creation of the service.
        type: string
    type: object
  dto.CreateTenent:
    properties:
      domain_id:
        description: DomainID is the id of the domain the tenant is in.
        type: string
      service_id:
        description: ServiceID  is the service id of service.
        type: string
      tenant_name:
        description: TenantName is the name of the tenant
        type: string
    type: object
  dto.DeleteDomain:
    properties:
      name:
        description: Name is the name of the domain
        type: string
      service_id:
        description: ServiceID is the id of the service which own the domain.
        type: string
    type: object
  dto.Domain:
    properties:
      created_at:
        description: CreatedAt is the  time this domain created at.
        type: string
      deleted_at:
        description: DeletedAt is the time this domain was deleted.
        type: string
      id:
        description: |-
          ID is the unique identifier for the domain
          It is automatically generated when the domain is created.
        type: string
      name:
        description: Name is the name of the domain
        type: string
      service_id:
        description: ServiceID is the id of the service which own the domain.
        type: string
      updated_at:
        description: CreatedAt is the  time this domain updated at.
        type: string
    type: object
  dto.Permission:
    properties:
      action:
        description: Action is the urn for the action(method) the user is taking on
          the resource
        type: string
      created_at:
        description: CreatedAt is the time this permission was created.
        type: string
      description:
        description: Description is the description of the permission being created
        type: string
      domains:
        description: Domain is an array that holds the id of the domains the permission
          is accessible at
        items:
          type: string
        type: array
      effect:
        description: |-
          Effect is the effect that's taken on the permission
          It is either allow or deny
        type: string
      fields:
        description: Fields are the attributes of the resource
        items:
          type: string
        type: array
      id:
        description: |-
          ID is the unique identifier for the service.
          It is automatically generated when the permission is registered.
        type: string
      name:
        description: Name is the name of the permission being created
        type: string
      resource:
        description: Resource is the urn for the path that is being accessed
        type: string
      service_id:
        description: ServiceID is the id of the service the permission belongs to
        type: string
      status:
        description: Status is the status of the permission.
        type: string
      tenant:
        description: |-
          Tenant is the scope the permissions is registred in.
          It is set to null unless it's created by a tenant
        type: string
      updated_at:
        description: UpdatedAt is the time this permission was last updated.
        type: string
    type: object
  dto.RegisterTenantPermission:
    properties:
      description:
        description: Description is the description of the permission being created
        type: string
      name:
        description: Name is the name of the permission being created
        type: string
      service_id:
        description: ServiceID is the id of the service the permission belongs to
        type: string
      statement:
        $ref: '#/definitions/dto.Statement'
        description: Statement is an object that holds the action, resource and effect
          of the permission being created
    type: object
  dto.RegisterUser:
    properties:
      service_id:
        description: ServiceID is the id of the service the user belongs to.
        type: string
      user_id:
        description: UserId is the id of the user.
        type: string
    type: object
  dto.Role:
    properties:
      created_at:
        description: CreatedAt is the time this service was created.
        type: string
      id:
        description: |-
          ID is the unique identifier for the service.
          It is automatically generated when the role is created.
        type: string
      name:
        description: Name is the name of the role.
        type: string
      status:
        description: Status is the status of the role.
        type: string
      updated_at:
        description: UpdatedAt is the time this service was last updated.
        type: string
    type: object
  dto.Statement:
    properties:
      action:
        description: Action is the urn for the action(method) the user is taking on
          the resource
        type: string
      effect:
        description: |-
          Effect is the effect that's taken on the permission
          It is either allow or deny
        type: string
      fields:
        description: Fields are the attributes of the resource
        items:
          type: string
        type: array
      resource:
        description: Resource is the urn for the path that is being accessed
        type: string
    type: object
  dto.UpdateRole:
    properties:
      permissions_id:
        description: PermissionID is the list of permissions id's.
        items:
          type: string
        type: array
      role_id:
        description: RoleID is the name of the role.
        type: string
    type: object
  dto.UpdateRoleStatus:
    properties:
      status:
        description: Status is new status of the role that is going to replace the
          old one
        type: string
    type: object
  dto.UpdateServiceStatus:
    properties:
      service:
        description: ServiceID is the unique identifier for the service.
        type: string
      status:
        description: Status is new status that will replace old status of the service
        type: string
    type: object
  dto.UpdateUserStatus:
    properties:
      service:
        description: ServiceID is the unique identifier for the service.
        type: string
      status:
        description: Status is new status that will replace old status of the user
        type: string
      user:
        description: UserId is the id of the user.
        type: string
    type: object
  model.ErrorResponse:
    properties:
      code:
        description: Code is the error code. It is not status code
        type: integer
      description:
        description: Description is the error description.
        type: string
      field_error:
        description: FieldError is the error detail for each field, if available that
          is.
        items:
          $ref: '#/definitions/model.FieldError'
        type: array
      message:
        description: Message is the error message.
        type: string
      stack_trace:
        description: |-
          StackTrace is the stack trace of the error.
          It is only returned for debugging
        type: string
    type: object
  model.FieldError:
    properties:
      description:
        description: Description is the error description for this field.
        type: string
      name:
        description: Name is the name of the field that caused the error.
        type: string
    type: object
  model.Request:
    properties:
      action:
        description: Action  is the urn of the action the user is taking on the resource.
        type: string
      fields:
        description: Fields are the attributes of the entity.
        items:
          type: string
        type: array
      resource:
        description: Resource is the urn for the resource the user is trying to take
          action on.
        type: string
      service:
        description: |-
          Service is the id of the service.
          It is set by the server after authenticating the service.
        type: string
      subject:
        description: Subject is the user id who is trying to take action on the resource.
        type: string
      tenant:
        description: |-
          Tenant is the scope the user is operating.
          It is set to "administrator" if it is not provided.
        type: string
    type: object
host: 206.189.54.235:5184
info:
  contact:
    email: info@1f-capital.com
    name: 2F Capital Support Email
    url: http://www.2fcapital.com
  title: Authorization API
  version: "0.1"
paths:
  /authorize:
    post:
      consumes:
      - application/json
      description: This function check whether the user is authorized or not to perform
        the action on the resource within the given tenant and service.
      parameters:
      - description: authorization request body
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.Request'
      produces:
      - application/json
      responses:
        "200":
          description: successfully authorize the user
          schema:
            type: boolean
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: authorize user.
      tags:
      - authorize
  /domains:
    delete:
      consumes:
      - application/json
      description: this function deletes the domain if it does already exist.
      parameters:
      - description: delete domain request body
        in: body
        name: deletedomain
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteDomain'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully deletes the service
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: deletes the domain.
      tags:
      - domain
    post:
      consumes:
      - application/json
      description: this function create new domain within the service if not exist.
      parameters:
      - description: create domain request body
        in: body
        name: createdomain
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDomain'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: successfully create new domain
          schema:
            $ref: '#/definitions/dto.Domain'
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: create new domain.
      tags:
      - domain
  /permissions:
    get:
      consumes:
      - application/json
      description: this function return a list of permissions that are under my domin.
      parameters:
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Permission'
            type: array
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: returns a list of permission.
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: |-
        this function registers the service if it does already exist.
        if the process finishes with out any error it returns true.
        if the process finishes with any error it returns false.
      parameters:
      - description: register permission request body
        in: body
        name: creatnewpermission
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePermission'
      produces:
      - application/json
      responses:
        "201":
          description: successfully register the permission
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized service
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: service is not active
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: register a new permission.
      tags:
      - permissions
  /permissions/inherit:
    post:
      consumes:
      - application/json
      description: |-
        This function creates a dependency between permission.
        If a permission inherites a permission and a user is granted the hair permission then the user implicitly granted the inherited permission
      parameters:
      - description: create permission dependency request body
        in: body
        name: creatpermissiondependency
        required: true
        schema:
          items:
            $ref: '#/definitions/dto.CreatePermissionDependency'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: successfully created dependency
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: create permission dependency.
      tags:
      - permissions
  /roles:
    get:
      consumes:
      - application/json
      description: this function return a list of roles.
      parameters:
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Role'
            type: array
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: returns a list of roles.
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: This function creates new role if the role doesn't exist.
      parameters:
      - description: create role request body
        in: body
        name: createrole
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRole'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully creates the role
          schema:
            $ref: '#/definitions/dto.Role'
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: add new role.
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: This function deletes the given role.
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully deletes role
          schema:
            type: string
        "400":
          description: invalid input error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: role not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: delete role.
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: This function updates the given role.
      parameters:
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: update role request body
        in: body
        name: updaterolepermissionslist
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRole'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully updated role
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: update role.
      tags:
      - roles
  /roles/{id}/status:
    patch:
      consumes:
      - application/json
      parameters:
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateRoleStatus'
      - description: role id
        in: path
        name: id
        required: true
        type: string
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully updates the role's status
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: changes role status
      tags:
      - roles
  /roles/{roleid}/users/{userid}:
    patch:
      consumes:
      - application/json
      description: This function revoke user's role if it is given.
      parameters:
      - description: user id
        in: path
        name: userid
        required: true
        type: string
      - description: role id
        in: path
        name: roleid
        required: true
        type: string
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully assigned role
          schema:
            $ref: '#/definitions/dto.Role'
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: revoke user role.
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: This function assign new role if the role  dosen't assigned.
      parameters:
      - description: user id
        in: path
        name: userid
        required: true
        type: string
      - description: role id
        in: path
        name: roleid
        required: true
        type: string
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully assigned role
          schema:
            $ref: '#/definitions/dto.Role'
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: assign role to a user.
      tags:
      - roles
  /services:
    delete:
      consumes:
      - application/json
      description: this function deletes the service if it does already exist.
      parameters:
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully deletes the service
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: service is not active
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: deletes the service.
      tags:
      - service
    post:
      consumes:
      - application/json
      description: this function creates new service if it does not already exist.
      parameters:
      - description: create service request body
        in: body
        name: createservice
        required: true
        schema:
          $ref: '#/definitions/dto.CreateService'
      produces:
      - application/json
      responses:
        "201":
          description: successfully create new service
          schema:
            $ref: '#/definitions/dto.CreateServiceResponse'
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: create new service.
      tags:
      - service
  /services/status:
    patch:
      consumes:
      - application/json
      parameters:
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateServiceStatus'
      produces:
      - application/json
      responses:
        "200":
          description: successfully updates the service status
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: changes service status
      tags:
      - services
  /tenants:
    post:
      consumes:
      - application/json
      description: this function create tenant if it is not exist in the service.
      parameters:
      - description: create tenant request body
        in: body
        name: createtenant
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTenent'
      produces:
      - application/json
      responses:
        "201":
          description: successfully create new tenant
          schema:
            type: boolean
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: create tenant.
      tags:
      - tenants
  /tenants/permissions:
    post:
      consumes:
      - application/json
      parameters:
      - description: new permission request body
        in: body
        name: creatnewpermission
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterTenantPermission'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: successfully register the permission
          schema:
            $ref: '#/definitions/dto.Permission'
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized service
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: service is not active
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: register a new permission.
      tags:
      - tenants
  /users:
    post:
      consumes:
      - application/json
      description: |-
        This function registers new user if the user doesn't exist.
        If the process finishes with out any error it returns true.
      parameters:
      - description: Register user request body
        in: body
        name: registeruser
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully register the user
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: add new user to the system.
      tags:
      - users
  /users/status:
    patch:
      consumes:
      - application/json
      parameters:
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserStatus'
      produces:
      - application/json
      responses:
        "200":
          description: successfully updates the user status
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: changes user status
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
