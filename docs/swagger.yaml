basePath: /v1
definitions:
  dto.CreateDomain:
    properties:
      name:
        description: Name is the name of the domain
        type: string
      service_id:
        description: ServiceID is the id of the service which own the domain.
        type: string
    type: object
  dto.CreatePermission:
    properties:
      action:
        description: Action is the urn for the action(method) the user is taking on
          the resource
        type: string
      description:
        description: Description is the description of the permission being created
        type: string
      domains:
        description: Domain is an array that holds the id of the domains the permission
          is accessible at
        items:
          type: string
        type: array
      effect:
        description: |-
          Effect is the effect that's taken on the permission
          It is either allow or deny
        type: string
      name:
        description: Name is the name of the permission being created
        type: string
      resource:
        description: Resource is the urn for the path that is being accessed
        type: string
      service_id:
        description: ServiceID is the id of the service the permission belongs to
        type: string
    type: object
  dto.CreateRole:
    properties:
      name:
        description: Name is the name of the role.
        type: string
      permissions_id:
        description: PermissionID is the list of permissions id's.
        items:
          type: string
        type: array
      service_id:
        description: ServiceID is the id of the service the tenant belongs to.
        type: string
      tenant_name:
        description: TenantName is the name of the tenant the role is in.
        type: string
    type: object
  dto.CreateService:
    properties:
      name:
        description: Name is the name of the service.
        type: string
      password:
        description: |-
          Password is the secret the service uses to authenticate itself.
          It is automatically generated when the service is created.
        type: string
      user_id:
        description: UserId is the id of the user assigned as the super admin for
          the created service.
        type: string
    type: object
  dto.CreateServiceResponse:
    properties:
      password:
        description: |-
          Password is the secret the service uses to authenticate itself.
          It is automatically generated when the service is created.
        type: string
      service:
        description: Service is the name of the service.
        type: string
      service_id:
        description: ServiceID is the unique identifier for the created service.
        type: string
      service_status:
        description: |-
          ServiceStatus is the status of the service.
          It is set to false when the service is created.
        type: string
      tenant:
        description: |-
          Tenant is the domain the super admin is in.
          It is automatically created upon the creation of the service.
        type: string
    type: object
  dto.CreateTenent:
    properties:
      domain_id:
        type: string
      service_id:
        description: ServiceID  is the service id of service.
        type: string
      tenant_name:
        description: TenantName is the name of the tenant
        type: string
    type: object
  dto.DeleteDomain:
    properties:
      name:
        description: Name is the name of the domain
        type: string
      service_id:
        description: ServiceID is the id of the service which own the domain.
        type: string
    type: object
  dto.Domain:
    properties:
      created_at:
        description: CreatedAt is the  time this domain created at.
        type: string
      deleted_at:
        description: DeletedAt is the time this domain was deleted.
        type: string
      id:
        description: |-
          ID is the unique identifier for the domain
          It is automatically generated when the domain is created.
        type: string
      name:
        description: Name is the name of the domain
        type: string
      service_id:
        description: ServiceID is the id of the service which own the domain.
        type: string
      updated_at:
        description: CreatedAt is the  time this domain updated at.
        type: string
    type: object
  dto.RegisterUser:
    properties:
      service_id:
        description: ServiceID is the id of the service the user belongs to.
        type: string
      user_id:
        description: UserId is the id of the user.
        type: string
    type: object
  dto.Role:
    properties:
      created_at:
        description: CreatedAt is the time this service was created.
        type: string
      deleted_at:
        description: DeletedAt is the time this service was created.
        type: string
      id:
        description: |-
          ID is the unique identifier for the service.
          It is automatically generated when the role is created.
        type: string
      name:
        description: Name is the name of the role.
        type: string
      status:
        description: Status is the status of the role.
        type: string
      updated_at:
        description: UpdatedAt is the time this service was last updated.
        type: string
    type: object
  dto.TenantUsersRole:
    properties:
      role_id:
        description: RoleID is id of the role which is going to be assigned to the
          user.
        type: string
      tenant_name:
        description: TenantName The Name of the tenante which is given when the tenant
          is created
        type: string
      user_id:
        description: UserID is the user identifier which going to get the the role
        type: string
    type: object
  model.ErrorResponse:
    properties:
      code:
        description: Code is the error code. It is not status code
        type: integer
      description:
        description: Description is the error description.
        type: string
      field_error:
        description: FieldError is the error detail for each field, if available that
          is.
        items:
          $ref: '#/definitions/model.FieldError'
        type: array
      message:
        description: Message is the error message.
        type: string
      stack_trace:
        description: |-
          StackTrace is the stack trace of the error.
          It is only returned for debugging
        type: string
    type: object
  model.FieldError:
    properties:
      description:
        description: Description is the error description for this field.
        type: string
      name:
        description: Name is the name of the field that caused the error.
        type: string
    type: object
host: 206.189.54.235:5184
info:
  contact:
    email: info@1f-capital.com
    name: 2F Capital Support Email
    url: http://www.2fcapital.com
  title: Authorization API
  version: "0.1"
paths:
  /domains:
    delete:
      consumes:
      - application/json
      description: this function deletes the domain if it does already exist.
      parameters:
      - description: delete domain request body
        in: body
        name: deletedomain
        required: true
        schema:
          $ref: '#/definitions/dto.DeleteDomain'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully deletes the service
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: deletes the domain.
      tags:
      - domain
    post:
      consumes:
      - application/json
      description: this function create new domain within the service if not exist.
      parameters:
      - description: create domain request body
        in: body
        name: createdomain
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDomain'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: successfully create new domain
          schema:
            $ref: '#/definitions/dto.Domain'
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: create new domain.
      tags:
      - domain
  /permissions:
    post:
      consumes:
      - application/json
      description: |-
        this function registers the service if it does already exist.
        if the process finishes with out any error it returns true.
        if the process finishes with any error it returns false.
      parameters:
      - description: register permission request body
        in: body
        name: creatnewpermission
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePermission'
      produces:
      - application/json
      responses:
        "201":
          description: successfully register the permission
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized service
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: service is not active
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: register a new permission.
      tags:
      - permissions
  /roles:
    post:
      consumes:
      - application/json
      description: This function creates new role if the role doesn't exist.
      parameters:
      - description: create role request body
        in: body
        name: createrole
        required: true
        schema:
          $ref: '#/definitions/dto.CreateRole'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully creates the role
          schema:
            $ref: '#/definitions/dto.Role'
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: add new role.
      tags:
      - roles
  /roles/{roleid}/users/{userid}:
    post:
      consumes:
      - application/json
      description: This function assign new role if the role  dosen't assigned.
      parameters:
      - description: assign role request body
        in: body
        name: assignrole
        required: true
        schema:
          $ref: '#/definitions/dto.TenantUsersRole'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully assigned role
          schema:
            $ref: '#/definitions/dto.Role'
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: assign role to a user.
      tags:
      - roles
  /services:
    delete:
      consumes:
      - application/json
      description: this function deletes the service if it does already exist.
      parameters:
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully deletes the service
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: service is not active
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: service not found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: deletes the service.
      tags:
      - service
    post:
      consumes:
      - application/json
      description: this function creates new service if it does not already exist.
      parameters:
      - description: create service request body
        in: body
        name: createservice
        required: true
        schema:
          $ref: '#/definitions/dto.CreateService'
      produces:
      - application/json
      responses:
        "201":
          description: successfully create new service
          schema:
            $ref: '#/definitions/dto.CreateServiceResponse'
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: create new service.
      tags:
      - service
  /tenants:
    post:
      consumes:
      - application/json
      description: this function create tenant if it is not exist in the service.
      parameters:
      - description: create tenant request body
        in: body
        name: createtenant
        required: true
        schema:
          $ref: '#/definitions/dto.CreateTenent'
      produces:
      - application/json
      responses:
        "201":
          description: successfully create new tenant
          schema:
            type: boolean
        "400":
          description: required field error,bad request error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: create tenant.
      tags:
      - tenant
  /users:
    post:
      consumes:
      - application/json
      description: |-
        This function registers new user if the user doesn't exist.
        If the process finishes with out any error it returns true.
      parameters:
      - description: Register user request body
        in: body
        name: registeruser
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      - description: user id
        in: header
        name: x-subject
        required: true
        type: string
      - description: action
        in: header
        name: x-action
        required: true
        type: string
      - description: tenant
        in: header
        name: x-tenant
        required: true
        type: string
      - description: resource
        in: header
        name: x-resource
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successfully register the user
          schema:
            type: boolean
        "400":
          description: required field error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: access denied
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: add new user to the system.
      tags:
      - users
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
