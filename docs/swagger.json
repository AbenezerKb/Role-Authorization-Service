{
    "swagger": "2.0",
    "info": {
        "title": "Authorization API",
        "contact": {
            "name": "2F Capital Support Email",
            "url": "http://www.2fcapital.com",
            "email": "info@1f-capital.com"
        },
        "version": "0.1"
    },
    "host": "206.189.54.235:5184",
    "basePath": "/v1",
    "paths": {
        "/authorize": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This function check whether the user is authorized or not to perform the action on the resource within the given tenant and service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authorize"
                ],
                "summary": "authorize user.",
                "parameters": [
                    {
                        "description": "authorization request body",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully authorize the user",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error,bad request error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/domains": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function create new domain within the service if not exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domain"
                ],
                "summary": "create new domain.",
                "parameters": [
                    {
                        "description": "create domain request body",
                        "name": "createdomain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateDomain"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successfully create new domain",
                        "schema": {
                            "$ref": "#/definitions/dto.Domain"
                        }
                    },
                    "400": {
                        "description": "required field error,bad request error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function deletes the domain if it does already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domain"
                ],
                "summary": "deletes the domain.",
                "parameters": [
                    {
                        "description": "delete domain request body",
                        "name": "deletedomain",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.DeleteDomain"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully deletes the service",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "service not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function return a list of permissions that are under my domin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "returns a list of permission.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function registers the service if it does already exist.\nif the process finishes with out any error it returns true.\nif the process finishes with any error it returns false.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "register a new permission.",
                "parameters": [
                    {
                        "description": "register permission request body",
                        "name": "creatnewpermission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePermission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successfully register the permission",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized service",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "service is not active",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This function creates new role if the role doesn't exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "add new role.",
                "parameters": [
                    {
                        "description": "create role request body",
                        "name": "createrole",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateRole"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully creates the role",
                        "schema": {
                            "$ref": "#/definitions/dto.Role"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "put": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This function updates the given role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "update role.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "role id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "update role request body",
                        "name": "updaterolepermissionslist",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRole"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully updated role",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{roleid}/users/{userid}": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This function assign new role if the role  dosen't assigned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "assign role to a user.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "role id",
                        "name": "roleid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully assigned role",
                        "schema": {
                            "$ref": "#/definitions/dto.Role"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/services": {
            "post": {
                "description": "this function creates new service if it does not already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "create new service.",
                "parameters": [
                    {
                        "description": "create service request body",
                        "name": "createservice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateService"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successfully create new service",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateServiceResponse"
                        }
                    },
                    "400": {
                        "description": "required field error,bad request error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function deletes the service if it does already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "deletes the service.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully deletes the service",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "service is not active",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "service not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/tenants": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function create tenant if it is not exist in the service.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tenant"
                ],
                "summary": "create tenant.",
                "parameters": [
                    {
                        "description": "create tenant request body",
                        "name": "createtenant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTenent"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successfully create new tenant",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error,bad request error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "This function registers new user if the user doesn't exist.\nIf the process finishes with out any error it returns true.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "add new user to the system.",
                "parameters": [
                    {
                        "description": "Register user request body",
                        "name": "registeruser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterUser"
                        }
                    },
                    {
                        "type": "string",
                        "description": "user id",
                        "name": "x-subject",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "action",
                        "name": "x-action",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "tenant",
                        "name": "x-tenant",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "resource",
                        "name": "x-resource",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully register the user",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateDomain": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the domain",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the id of the service which own the domain.",
                    "type": "string"
                }
            }
        },
        "dto.CreatePermission": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the description of the permission being created",
                    "type": "string"
                },
                "domains": {
                    "description": "Domain is an array that holds the id of the domains the permission is accessible at",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name is the name of the permission being created",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the id of the service the permission belongs to",
                    "type": "string"
                },
                "statement": {
                    "description": "Statement is an object that holds the action, resource and effect of the permission being created",
                    "$ref": "#/definitions/dto.Statement"
                }
            }
        },
        "dto.CreateRole": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the role.",
                    "type": "string"
                },
                "permissions_id": {
                    "description": "PermissionID is the list of permissions id's.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "service_id": {
                    "description": "ServiceID is the id of the service the tenant belongs to.",
                    "type": "string"
                },
                "tenant_name": {
                    "description": "TenantName is the name of the tenant the role is in.",
                    "type": "string"
                }
            }
        },
        "dto.CreateService": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the service.",
                    "type": "string"
                },
                "password": {
                    "description": "Password is the secret the service uses to authenticate itself.\nIt is automatically generated when the service is created.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserId is the id of the user assigned as the super admin for the created service.",
                    "type": "string"
                }
            }
        },
        "dto.CreateServiceResponse": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password is the secret the service uses to authenticate itself.\nIt is automatically generated when the service is created.",
                    "type": "string"
                },
                "service": {
                    "description": "Service is the name of the service.",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the unique identifier for the created service.",
                    "type": "string"
                },
                "service_status": {
                    "description": "ServiceStatus is the status of the service.\nIt is set to false when the service is created.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant is the domain the super admin is in.\nIt is automatically created upon the creation of the service.",
                    "type": "string"
                }
            }
        },
        "dto.CreateTenent": {
            "type": "object",
            "properties": {
                "domain_id": {
                    "description": "DomainID is the id of the domain the tenant is in.",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID  is the service id of service.",
                    "type": "string"
                },
                "tenant_name": {
                    "description": "TenantName is the name of the tenant",
                    "type": "string"
                }
            }
        },
        "dto.DeleteDomain": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the domain",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the id of the service which own the domain.",
                    "type": "string"
                }
            }
        },
        "dto.Domain": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the  time this domain created at.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is the time this domain was deleted.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the domain\nIt is automatically generated when the domain is created.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the domain",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the id of the service which own the domain.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "CreatedAt is the  time this domain updated at.",
                    "type": "string"
                }
            }
        },
        "dto.Permission": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action is the urn for the action(method) the user is taking on the resource",
                    "type": "string"
                },
                "created_at": {
                    "description": "CreatedAt is the time this permission was created.",
                    "type": "string"
                },
                "description": {
                    "description": "Description is the description of the permission being created",
                    "type": "string"
                },
                "domains": {
                    "description": "Domain is an array that holds the id of the domains the permission is accessible at",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "effect": {
                    "description": "Effect is the effect that's taken on the permission\nIt is either allow or deny",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the service.\nIt is automatically generated when the permission is registered.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the permission being created",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource is the urn for the path that is being accessed",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the id of the service the permission belongs to",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the permission.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the time this permission was last updated.",
                    "type": "string"
                }
            }
        },
        "dto.RegisterUser": {
            "type": "object",
            "properties": {
                "service_id": {
                    "description": "ServiceID is the id of the service the user belongs to.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserId is the id of the user.",
                    "type": "string"
                }
            }
        },
        "dto.Role": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt is the time this service was created.",
                    "type": "string"
                },
                "deleted_at": {
                    "description": "DeletedAt is the time this service was created.",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier for the service.\nIt is automatically generated when the role is created.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the role.",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the role.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "UpdatedAt is the time this service was last updated.",
                    "type": "string"
                }
            }
        },
        "dto.Statement": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action is the urn for the action(method) the user is taking on the resource",
                    "type": "string"
                },
                "effect": {
                    "description": "Effect is the effect that's taken on the permission\nIt is either allow or deny",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource is the urn for the path that is being accessed",
                    "type": "string"
                }
            }
        },
        "dto.UpdateRole": {
            "type": "object",
            "properties": {
                "permissions_id": {
                    "description": "PermissionID is the list of permissions id's.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role_id": {
                    "description": "RoleID is the name of the role.",
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is the error code. It is not status code",
                    "type": "integer"
                },
                "description": {
                    "description": "Description is the error description.",
                    "type": "string"
                },
                "field_error": {
                    "description": "FieldError is the error detail for each field, if available that is.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FieldError"
                    }
                },
                "message": {
                    "description": "Message is the error message.",
                    "type": "string"
                },
                "stack_trace": {
                    "description": "StackTrace is the stack trace of the error.\nIt is only returned for debugging",
                    "type": "string"
                }
            }
        },
        "model.FieldError": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the error description for this field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the field that caused the error.",
                    "type": "string"
                }
            }
        },
        "model.Request": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action  is the urn of the action the user is taking on the resource.",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource is the urn for the resource the user is trying to take action on.",
                    "type": "string"
                },
                "service": {
                    "description": "Service is the id of the service.\nIt is set by the server after authenticating the service.",
                    "type": "string"
                },
                "subject": {
                    "description": "Subject is the user id who is trying to take action on the resource.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant is the scope the user is operating.\nIt is set to \"administrator\" if it is not provided.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}