// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "2F Capital Support Email",
            "url": "http://www.2fcapital.com",
            "email": "info@1f-capital.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/services": {
            "post": {
                "description": "this function creates new service if it does not already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "create new service.",
                "parameters": [
                    {
                        "description": "create service request body",
                        "name": "createservice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateService"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "successfully create new service",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateServiceResponse"
                        }
                    },
                    "400": {
                        "description": "required field error,bad request error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "this function deletes the service if it does already exist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "service"
                ],
                "summary": "deletes the service.",
                "parameters": [
                    {
                        "description": "delete service request body",
                        "name": "deleteservice",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully deletes the service",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "required field error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "unauthorized service",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "service is not active",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "service not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "invalid input",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.CreateService": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the service.",
                    "type": "string"
                },
                "password": {
                    "description": "Password is the secret the service uses to authenticate itself.\nIt is automatically generated when the service is created.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserId is the id of the user assigned as the super admin for the created service.",
                    "type": "string"
                }
            }
        },
        "dto.CreateServiceResponse": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password is the secret the service uses to authenticate itself.\nIt is automatically generated when the service is created.",
                    "type": "string"
                },
                "service": {
                    "description": "Service is the name of the service.",
                    "type": "string"
                },
                "service_id": {
                    "description": "ServiceID is the unique identifier for the created service.",
                    "type": "string"
                },
                "service_status": {
                    "description": "ServiceStatus is the status of the service.\nIt is set to false when the service is created.",
                    "type": "boolean"
                },
                "tenant": {
                    "description": "Tenant is the domain the super admin is in.\nIt is automatically created upon the creation of the service.",
                    "type": "string"
                }
            }
        },
        "model.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code is the error code. It is not status code",
                    "type": "integer"
                },
                "description": {
                    "description": "Description is the error description.",
                    "type": "string"
                },
                "field_error": {
                    "description": "FieldError is the error detail for each field, if available that is.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.FieldError"
                    }
                },
                "message": {
                    "description": "Message is the error message.",
                    "type": "string"
                },
                "stack_trace": {
                    "description": "StackTrace is the stack trace of the error.\nIt is only returned for debugging",
                    "type": "string"
                }
            }
        },
        "model.FieldError": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the error description for this field.",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the field that caused the error.",
                    "type": "string"
                }
            }
        },
        "model.Request": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action  is the urn of the action the user is taking on the resource.",
                    "type": "string"
                },
                "resource": {
                    "description": "Resource is the urn for the resource the user is trying to take action on.",
                    "type": "string"
                },
                "service": {
                    "description": "Service is the id of the service.\nIt is set by the server after authenticating the service.",
                    "type": "string"
                },
                "subject": {
                    "description": "Subject is the user id who is trying to take action on the resource.",
                    "type": "string"
                },
                "tenant": {
                    "description": "Tenant is the scope the user is operating.\nIt is set to \"administrator\" if it is not provided.",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "206.189.54.235:8000",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Authorization API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
